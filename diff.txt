diff --git a/jstests/libs/dbevents.js b/jstests/libs/dbevents.js
index d077baf..cbf6afd 100644
--- a/jstests/libs/dbevents.js
+++ b/jstests/libs/dbevents.js
@@ -1,9 +1,9 @@
 /**
- * Shared function to use when testing database event notifications
- * using pubsub. Tests to make sure that write commands on the publisher
+ * Shared functions to use when testing database event notifications
+ * using pubsub. Test to make sure that write commands on the publisher
  * are received as events on the appropriate channels on the subscriber.
  */
-var receiveDbEvents = function(publisher, subscriber) {
+var testPubSubDataEvents = function(publisher, subscriber) {
 
     // makeshift function overloading so this
     // method can test a single node or a pair
@@ -21,7 +21,7 @@ var receiveDbEvents = function(publisher, subscriber) {
     var updateChannel = channelPrefix + 'update';
     var removeChannel = channelPrefix + 'remove';
     var eventSub = subscriber.runCommand({subscribe: channelPrefix}).subscriptionId;
-    var res;
+    var res, msg;
 
 
 
@@ -29,15 +29,17 @@ var receiveDbEvents = function(publisher, subscriber) {
     // - do an insert
     // - assert that the subscriber received a single event of the correct type
     // - ensure that the response body had the correct document
-    assert.writeOK(publisher.pubsub.insert({text: 'hello'}));
+    var oldDoc = {_id: 1, text: 'hello'};
+    assert.writeOK(publisher.pubsub.save(oldDoc));
 
     assert.soon(function() {
         res = subscriber.runCommand({poll: eventSub});
         return res.messages[eventSub.str] !== undefined;
     });
 
-    assert.eq(res.messages[eventSub.str][insertChannel].length, 1);
-    assert.eq(res.messages[eventSub.str][insertChannel][0].text, 'hello');
+    assertMessageCount(res, eventSub, insertChannel, 1);
+    msg = res.messages[eventSub.str][insertChannel][0];
+    assert.eq(msg, oldDoc);
 
 
 
@@ -49,18 +51,20 @@ var receiveDbEvents = function(publisher, subscriber) {
     //    old: <old document>,
     //    new: <new document>
     // }
-    assert.writeOK(publisher.pubsub.update({text: 'hello'}, {text: 'goodbye'}));
+    var newDoc = {_id: 1, text: 'goodbye'}
+    assert.writeOK(publisher.pubsub.save(newDoc));
 
     assert.soon(function() {
         res = subscriber.runCommand({poll: eventSub});
         return res.messages[eventSub.str] !== undefined;
     });
 
-    assert.eq(res.messages[eventSub.str][updateChannel].length, 1);
-    assert(res.messages[eventSub.str][updateChannel][0].hasOwnProperty('old'));
-    assert(res.messages[eventSub.str][updateChannel][0].hasOwnProperty('new'));
-    assert.eq(res.messages[eventSub.str][updateChannel][0].old.text, 'hello');
-    assert.eq(res.messages[eventSub.str][updateChannel][0]['new'].text, 'goodbye');
+    assertMessageCount(res, eventSub, updateChannel, 1);
+    var msg = res.messages[eventSub.str][updateChannel][0];
+    assert(msg.hasOwnProperty('old'));
+    assert(msg.hasOwnProperty('new'));
+    assert.eq(msg.old, oldDoc);
+    assert.eq(msg.new, newDoc);
 
 
 
@@ -75,11 +79,17 @@ var receiveDbEvents = function(publisher, subscriber) {
         return res.messages[eventSub.str] !== undefined;
     });
 
-    assert.eq(res.messages[eventSub.str][removeChannel].length, 1);
-    assert.eq(res.messages[eventSub.str][removeChannel][0].text, 'goodbye');
+    assertMessageCount(res, eventSub, removeChannel, 1);
+    msg = res.messages[eventSub.str][removeChannel][0];
+    assert.eq(msg, newDoc);
 
 
+    // clean up subscription
     subscriber.runCommand({unsubscribe: eventSub});
+}
 
-    return true;
+var assertMessageCount = function(res, subscriptionId, channel, count) {
+    var channelMessages = res.messages[subscriptionId.str][channel];
+    assert.neq(channelMessages, undefined);
+    assert.eq(channelMessages.length, count);
 }
diff --git a/jstests/pubsub/cluster_dbevents.js b/jstests/pubsub/cluster_dbevents.js
index ba5fdea..871226e 100644
--- a/jstests/pubsub/cluster_dbevents.js
+++ b/jstests/pubsub/cluster_dbevents.js
@@ -1,20 +1,24 @@
 // load pubsub database events functions
 assert(load('jstests/libs/dbevents.js'));
 
-// start a cluster with 2 mongoses
-// TODO: make this work correctly with all configurations
-var st = new ShardingTest({name: 'pubsubClusterDbEvents', mongos: 1, config: 1, shards: 1, rs: {nodes: 1}});
-// var st = new ShardingTest({name: 'pubsubClusterDbEvents', mongos: 2, rs: {nodes: 1}});
+// start a cluster with 3 mongoses
+var st = new ShardingTest({name: 'pubsubClusterDbEvents', mongos: 3, config: 3});
 
 var db0 = st.s0.getDB('test');
-// var db1 = st.s1.getDB('test');
+var db1 = st.s1.getDB('test');
+var db2 = st.s2.getDB('test');
 
 // each mongos can communicate with itself
-assert(receiveDbEvents(db0));
-// assert(receiveDbEvents(db1));
+testPubSubDataEvents(db0);
+testPubSubDataEvents(db1);
+testPubSubDataEvents(db2);
 
-// // event notifications work between the nodes
-// assert(receiveDbEvents(db0, db1));
-// assert(receiveDbEvents(db1, db0));
+// event notifications work between the nodes
+testPubSubDataEvents(db0, db1);
+testPubSubDataEvents(db1, db0);
+testPubSubDataEvents(db0, db2);
+testPubSubDataEvents(db2, db0);
+testPubSubDataEvents(db1, db2);
+testPubSubDataEvents(db2, db1);
 
 st.stop();
diff --git a/jstests/pubsub/repl_dbevents.js b/jstests/pubsub/repl_dbevents.js
index 069fa51..5bac46b 100644
--- a/jstests/pubsub/repl_dbevents.js
+++ b/jstests/pubsub/repl_dbevents.js
@@ -15,6 +15,6 @@ var primary = rs.getPrimary().getDB('test');
 var secondary = rs.getSecondary().getDB('test');
 
 // events work between the two nodes
-assert(receiveDbEvents(primary, secondary));
+testPubSubDataEvents(primary, secondary);
 
 rs.stopSet();
diff --git a/jstests/pubsub/single_mongod_dbevents.js b/jstests/pubsub/single_mongod_dbevents.js
index f0986d6..2bbe6bb 100644
--- a/jstests/pubsub/single_mongod_dbevents.js
+++ b/jstests/pubsub/single_mongod_dbevents.js
@@ -1,4 +1,4 @@
 // load pubsub database events functions
 assert(load('jstests/libs/dbevents.js'));
 
-assert(receiveDbEvents(db));
+testPubSubDataEvents(db);
diff --git a/src/mongo/db/catalog/collection.cpp b/src/mongo/db/catalog/collection.cpp
index 611eef4..cc655fc 100644
--- a/src/mongo/db/catalog/collection.cpp
+++ b/src/mongo/db/catalog/collection.cpp
@@ -192,7 +192,7 @@ namespace mongo {
             _details->paddingFits();
 
             // TODO: allow ns-cmdtype or cmdtype-ns option
-            std::string channel = "$event." + _ns.ns() + ".insert";
+            std::string channel = "$events." + _ns.ns() + ".insert";
             bool success = PubSub::publish(channel, docToInsert);
             if (!success)
                 log() << "Error publishing DB event." << endl;
@@ -219,7 +219,7 @@ namespace mongo {
             return StatusWith<DiskLoc>( status );
 
         // TODO: allow ns-cmdtype or cmdtype-ns option
-        std::string channel = "$event." + _ns.ns() + ".insert";
+        std::string channel = "$events." + _ns.ns() + ".insert";
         bool success = PubSub::publish(channel, doc);
         if (!success)
             log() << "Error publishing DB event." << endl;
@@ -279,7 +279,7 @@ namespace mongo {
         BSONObj doc = docFor( loc );
 
         // TODO: allow ns-cmdtype or cmdtype-ns option
-        std::string channel = "$event." + _ns.ns() + ".remove";
+        std::string channel = "$events." + _ns.ns() + ".remove";
         bool success = PubSub::publish(channel, doc);
         if (!success)
             log() << "Error publishing DB event." << endl;
diff --git a/src/mongo/db/ops/update.cpp b/src/mongo/db/ops/update.cpp
index ceedfe0..52ff15d 100644
--- a/src/mongo/db/ops/update.cpp
+++ b/src/mongo/db/ops/update.cpp
@@ -788,7 +788,7 @@ namespace mongo {
                 opDebug->nModified++;
 
             // TODO: allow ns-cmdtype or cmdtype-ns option
-            std::string channel = "$event." + nsString.ns() + ".update";
+            std::string channel = "$events." + nsString.ns() + ".update";
             BSONObj body = BSON("old" << oldObjOwned << "new" << newObj);
             bool success = PubSub::publish(channel, body);
             if (!success)
diff --git a/src/mongo/db/pubsub.cpp b/src/mongo/db/pubsub.cpp
index 975f078..a5c431c 100644
--- a/src/mongo/db/pubsub.cpp
+++ b/src/mongo/db/pubsub.cpp
@@ -191,13 +191,13 @@ namespace mongo {
             // workaround to compile on mongos without including d_logic.cpp
             if (!serverGlobalParams.configsvr &&
                 PubSub::dbEventSocket != NULL &&
-                channel.substr(0, 7) == "$event.") {
+                StringData(channel).startsWith("$events.")) {
                 // only publish database events to config servers
-                const BSONObj messageCopy = message.copy(); // necessary? test
                 PubSub::dbEventSocket->send(channel.c_str(), channel.size() + 1, ZMQ_SNDMORE);
-                PubSub::dbEventSocket->send(messageCopy.objdata(), messageCopy.objsize());
+                PubSub::dbEventSocket->send(message.objdata(), message.objsize());
             }
 
+            // writes to config servers are published normally
             PubSubSendSocket::extSendSocket->send(channel.c_str(), channel.size() + 1, ZMQ_SNDMORE);
             PubSubSendSocket::extSendSocket->send(message.objdata(), message.objsize());
         } catch (zmq::error_t& e) {
diff --git a/src/mongo/db/pubsub_s.cpp b/src/mongo/db/pubsub_s.cpp
index 17223d9..3b8e0a1 100644
--- a/src/mongo/db/pubsub_s.cpp
+++ b/src/mongo/db/pubsub_s.cpp
@@ -57,18 +57,19 @@ namespace mongo {
                 HostAndPort configHP = HostAndPort(*it);
                 if (configHP.port() > maxConfigHP.port())
                     maxConfigHP = configHP;
-            }
 
+                HostAndPort configPubEndpoint = HostAndPort(configHP.host(),
+                                                            configHP.port() + 2345);
+                PubSub::extRecvSocket->connect(("tcp://" +
+                                                 configPubEndpoint.toString()).c_str());
+            }
 
             HostAndPort configPullEndpoint = HostAndPort(maxConfigHP.host(),
                                                          maxConfigHP.port() + 1234);
-            HostAndPort configPubEndpoint = HostAndPort(maxConfigHP.host(),
-                                                        maxConfigHP.port() + 2345);
+
             try {
                 PubSubSendSocket::extSendSocket->connect(("tcp://" +
                                                  configPullEndpoint.toString()).c_str());
-                PubSub::extRecvSocket->connect(("tcp://" +
-                                                 configPubEndpoint.toString()).c_str());
             } catch (zmq::error_t& e) {
                 // TODO: turn off pubsub if connection here fails
                 log() << "Error connecting pubsub sockets." << causedBy(e) << endl;
